name: CI/CD Pipeline  # Nom du pipeline CI/CD

# Déclenche le workflow sur les pushs vers les branches 'main' et 'dev'
on:
  push:
    branches:
      - main  # Branche principale de production
      - dev   # Branche de développement
    tags:
      - 'v*.*.*'  # Déclenche le workflow sur les tags de version (par ex. 'v1.0.0')

# Définition des jobs du workflow
jobs:
  # Job pour tester le code
  test:
    runs-on: ubuntu-latest  # Utilise un runner Ubuntu

    steps:
      # Étape pour vérifier le code source du dépôt
      - uses: actions/checkout@v4  # Action pour cloner le dépôt GitHub

      # Étape pour configurer Python
      - name: Set up Python
        uses: actions/setup-python@v4  # Action pour installer Python
        with:
          python-version: '3.x'  # Utilise la dernière version mineure de Python 3

      # Étape pour installer les dépendances du projet
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Met à jour pip
          pip install -r requirements.txt  # Installe les dépendances à partir du fichier requirements.txt
          pip install pylint  # Installe pylint pour l'analyse statique du code

      # Étape pour analyser statiquement le code avec pylint
      - name: Lint
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/app  # Ajoute le répertoire app au PYTHONPATH
          pylint app/src --fail-under=6  # Analyse le code dans le répertoire 'app/src' et échoue si le score est inférieur à 6

  # Job pour construire et déployer l'image Docker, qui dépend du job 'test'
  build-and-deploy:
    needs: test  # S'exécute seulement si le job 'test' réussit
    runs-on: ubuntu-latest  # Utilise un runner Ubuntu

    steps:
      # Étape pour vérifier le code source du dépôt
      - uses: actions/checkout@v4  # Action pour cloner le dépôt GitHub

      # Étape pour configurer QEMU pour l'émulation multi-architecture
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3  # Action pour configurer QEMU

      # Étape pour configurer Docker Buildx pour la construction multi-architecture
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Action pour configurer Docker Buildx

      # Étape pour générer les métadonnées Docker (tags et labels)
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5  # Action pour générer les métadonnées Docker
        with:
          images: wolfpackstatmathieu/ym-api  # Nom de l'image Docker

      # Étape pour se connecter à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3  # Action pour se connecter à Docker Hub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Nom d'utilisateur Docker Hub, stocké dans les secrets GitHub
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # Mot de passe Docker Hub, stocké dans les secrets GitHub

      # Étape pour construire et pousser l'image Docker vers Docker Hub
      - name: Build and push
        uses: docker/build-push-action@v5  # Action pour construire et pousser l'image Docker
        with:
          push: true  # Pousse l'image construite vers Docker Hub
          tags: wolfpackstatmathieu/ym-api:v1.0.2 # Utilise les tags générés par l'étape Docker meta
          labels: ${{ steps.meta.outputs.labels }}  # Utilise les labels générés par l'étape Docker meta
